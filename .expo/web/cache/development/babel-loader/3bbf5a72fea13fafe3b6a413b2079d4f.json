{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\n\nvar isString = function isString(str) {\n  return Object.prototype.toString.call(str) === '[object String]';\n};\n\nvar isBool = function isBool(bool) {\n  return Object.prototype.toString.call(bool) === '[object Boolean]';\n};\n\nvar createError = function createError() {\n  var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return Promise.reject(new Error(msg));\n};\n\nvar openLink = function openLink(url, cb) {\n  return Linking.canOpenURL(url).then(function (canOpen) {\n    if (!canOpen) {\n      return createError(\"invalid URL provided: \" + url);\n    } else {\n      return Linking.openURL(url).catch(function (err) {\n        return Promise.reject(err);\n      });\n    }\n  });\n};\n\nvar call = function call() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var settings = _extends({\n    prompt: true\n  }, args);\n\n  if (!settings.number) {\n    return createError('no number provided');\n  }\n\n  if (!isString(settings.number)) {\n    return createError('number should be string');\n  }\n\n  if (!isBool(settings.prompt)) {\n    return createError('prompt should be bool');\n  }\n\n  var url = \"\" + (Platform.OS === 'ios' && settings.prompt ? 'telprompt:' : 'tel:') + settings.number;\n  return openLink(url);\n};\n\nexport default call;","map":{"version":3,"sources":["/Users/khramushin/Desktop/MySibSU/node_modules/react-native-phone-call/index.js"],"names":["isString","str","Object","prototype","toString","call","isBool","bool","createError","msg","Promise","reject","Error","openLink","url","cb","Linking","canOpenURL","then","canOpen","openURL","catch","err","args","settings","prompt","number","Platform","OS"],"mappings":";;;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD;AAAA,SAASC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,iBAAjD;AAAA,CAAjB;;AACA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;AAAA,SAAUL,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BE,IAA/B,MAAyC,kBAAnD;AAAA,CAAf;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAcC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAUH,GAAV,CAAf,CAAd;AAAA,CAApB;;AAEA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,EAAN,EAAa;AAC5B,SAAOC,OAAO,CAACC,UAAR,CAAmBH,GAAnB,EAAwBI,IAAxB,CAA6B,UAAAC,OAAO,EAAI;AAC7C,QAAI,CAACA,OAAL,EAAc;AACZ,aAAOX,WAAW,4BAA0BM,GAA1B,CAAlB;AACD,KAFD,MAEO;AACL,aAAOE,OAAO,CAACI,OAAR,CAAgBN,GAAhB,EAAqBO,KAArB,CAA2B,UAACC,GAAD;AAAA,eAASZ,OAAO,CAACC,MAAR,CAAeW,GAAf,CAAT;AAAA,OAA3B,CAAP;AACD;AACF,GANM,CAAP;AAOD,CARD;;AAUA,IAAMjB,IAAI,GAAG,SAAPA,IAAO,GAAe;AAAA,MAAdkB,IAAc,uEAAP,EAAO;;AAC1B,MAAMC,QAAQ,GAAG,SAAc;AAC7BC,IAAAA,MAAM,EAAE;AADqB,GAAd,EAEdF,IAFc,CAAjB;;AAIA,MAAI,CAACC,QAAQ,CAACE,MAAd,EAAsB;AAAE,WAAOlB,WAAW,CAAC,oBAAD,CAAlB;AAA0C;;AAClE,MAAI,CAACR,QAAQ,CAACwB,QAAQ,CAACE,MAAV,CAAb,EAAgC;AAAE,WAAOlB,WAAW,CAAC,yBAAD,CAAlB;AAA+C;;AACjF,MAAI,CAACF,MAAM,CAACkB,QAAQ,CAACC,MAAV,CAAX,EAA8B;AAAE,WAAOjB,WAAW,CAAC,uBAAD,CAAlB;AAA6C;;AAE7E,MAAMM,GAAG,SAAMa,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyBJ,QAAQ,CAACC,MAAlC,GAA2C,YAA3C,GAA0D,MAAhE,IAAyED,QAAQ,CAACE,MAA3F;AAEA,SAAOb,QAAQ,CAACC,GAAD,CAAf;AACD,CAZD;;AAcA,eAAeT,IAAf","sourcesContent":["import { Platform, Linking } from 'react-native'\n\nconst isString = (str) => Object.prototype.toString.call(str) === '[object String]'\nconst isBool = (bool) => Object.prototype.toString.call(bool) === '[object Boolean]'\n\nconst createError = (msg = '') => Promise.reject(new Error(msg))\n\nconst openLink = (url, cb) => {\n  return Linking.canOpenURL(url).then(canOpen => {\n    if (!canOpen) {\n      return createError(`invalid URL provided: ${url}`)\n    } else {\n      return Linking.openURL(url).catch((err) => Promise.reject(err))\n    }\n  })\n}\n\nconst call = (args = {}) => {\n  const settings = Object.assign({\n    prompt: true\n  }, args)\n\n  if (!settings.number) { return createError('no number provided') }\n  if (!isString(settings.number)) { return createError('number should be string') }\n  if (!isBool(settings.prompt)) { return createError('prompt should be bool') }\n\n  const url = `${Platform.OS === 'ios' && settings.prompt ? 'telprompt:' : 'tel:'}${settings.number}`\n\n  return openLink(url)\n}\n\nexport default call\n"]},"metadata":{},"sourceType":"module"}